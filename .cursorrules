# R√®gles de d√©veloppement EcoPanier

## üìã Contexte du projet

**EcoPanier** est une plateforme anti-gaspillage alimentaire avec volet solidarit√© sociale (paniers suspendus).
Elle connecte commer√ßants, clients, b√©n√©ficiaires et collecteurs pour sauver des invendus tout en aidant les personnes en pr√©carit√©.

### Mission
- R√©duire le gaspillage alimentaire
- Promouvoir la solidarit√© (paniers suspendus)
- Soutenir les commerces locaux
- Faciliter la logistique solidaire

### Utilisateurs (5 r√¥les)
1. **Client** : Ach√®te des lots √† prix r√©duits, offre des paniers suspendus
2. **Commer√ßant** : Cr√©e des lots d'invendus, g√®re une station de retrait
3. **B√©n√©ficiaire** : Acc√®de aux lots gratuits et paniers suspendus (max 2/jour)
4. **Collecteur** : Effectue les livraisons solidaires contre r√©mun√©ration
5. **Admin** : G√®re la plateforme, les utilisateurs et les param√®tres

## üõ†Ô∏è Stack technique

### Frontend
- React 18.3.1 + TypeScript 5.5.3
- Vite 5.4.2 (build tool)
- React Router DOM 7.9.4 (routing)
- Tailwind CSS 3.4.1 (styling)
- Zustand 5.0.8 (state management global)
- Lucide React (ic√¥nes)
- Recharts 3.2.1 (graphiques)
- qrcode.react + @yudiel/react-qr-scanner (QR codes)
- date-fns 4.1.0 (dates)

### Backend
- Supabase 2.57.4 (BaaS)
  - PostgreSQL (database)
  - Auth (authentification)
  - Storage (futur : images)
  - Realtime (futur : notifications)

## üìÅ Structure du projet

```
src/
‚îú‚îÄ‚îÄ components/              # Composants organis√©s par domaine m√©tier
‚îÇ   ‚îú‚îÄ‚îÄ admin/              # Dashboard admin, analytics, logs, settings
‚îÇ   ‚îú‚îÄ‚îÄ auth/               # Formulaire d'authentification
‚îÇ   ‚îú‚îÄ‚îÄ beneficiary/        # Interface b√©n√©ficiaire
‚îÇ   ‚îú‚îÄ‚îÄ collector/          # Interface collecteur
‚îÇ   ‚îú‚îÄ‚îÄ customer/           # Interface client
‚îÇ   ‚îú‚îÄ‚îÄ merchant/           # Interface commer√ßant
‚îÇ   ‚îú‚îÄ‚îÄ landing/            # Page d'accueil publique
‚îÇ   ‚îú‚îÄ‚îÄ pages/              # Pages g√©n√©riques (aide, comment √ßa marche)
‚îÇ   ‚îú‚îÄ‚îÄ pickup/             # Station de retrait (scan QR)
‚îÇ   ‚îî‚îÄ‚îÄ shared/             # Composants r√©utilisables
‚îú‚îÄ‚îÄ contexts/               # React Context (SettingsContext)
‚îú‚îÄ‚îÄ hooks/                  # Hooks personnalis√©s
‚îú‚îÄ‚îÄ lib/                    # Configuration (supabase.ts, types DB)
‚îú‚îÄ‚îÄ stores/                 # Zustand stores (authStore)
‚îú‚îÄ‚îÄ utils/                  # Fonctions utilitaires
‚îú‚îÄ‚îÄ App.tsx                 # Routing principal
‚îú‚îÄ‚îÄ main.tsx                # Point d'entr√©e
‚îî‚îÄ‚îÄ index.css               # Styles globaux + Tailwind

supabase/
‚îî‚îÄ‚îÄ migrations/             # Migrations SQL
    ‚îú‚îÄ‚îÄ 20251011204650_create_food_waste_platform_schema.sql
    ‚îú‚îÄ‚îÄ 20251012_platform_settings.sql
    ‚îú‚îÄ‚îÄ 20251012_suspended_baskets.sql
    ‚îî‚îÄ‚îÄ 20251012_suspended_baskets_sample_data.sql
```

## üé® Conventions de code

### Nommage

| √âl√©ment | Convention | Exemple |
|---------|-----------|---------|
| Composants | PascalCase | `UserProfile.tsx` |
| Fichiers composants | PascalCase | `LotCard.tsx` |
| Hooks | camelCase + `use` | `useAuthStore.ts`, `useLotFilters.ts` |
| Fonctions | camelCase | `fetchUserData()`, `calculatePrice()` |
| Variables | camelCase | `const userData = ...` |
| Constantes | UPPER_SNAKE_CASE | `const MAX_RETRY = 3` |
| Types/Interfaces | PascalCase | `interface UserProfile {}` |
| Fichiers utils | camelCase ou kebab-case | `helpers.ts`, `date-utils.ts` |

### Structure d'un composant

```typescript
// 1. Imports externes
import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';

// 2. Imports internes (stores, contexts, components)
import { useAuthStore } from '@/stores/authStore';
import { Button } from '@/components/shared/Button';

// 3. Imports types
import type { User } from '@/lib/database.types';

// 4. D√©finition des types/interfaces du composant
interface MyComponentProps {
  user: User;
  onAction?: () => void;
}

// 5. Composant
export function MyComponent({ user, onAction }: MyComponentProps) {
  // A. √âtat local
  const [loading, setLoading] = useState(false);
  
  // B. Hooks (stores, contexts, router)
  const { profile } = useAuthStore();
  const navigate = useNavigate();
  
  // C. Effets
  useEffect(() => {
    // Side effects
  }, [user]);
  
  // D. Handlers
  const handleClick = async () => {
    setLoading(true);
    // Logic
    setLoading(false);
  };
  
  // E. Early returns (conditions de sortie)
  if (!user) return null;
  if (loading) return <LoadingSpinner />;
  
  // F. Render principal
  return (
    <div className="card">
      {/* JSX */}
    </div>
  );
}
```

### TypeScript

**TOUJOURS utiliser TypeScript. Jamais `any` sauf cas exceptionnel.**

```typescript
// ‚úÖ BON
interface LotData {
  id: string;
  title: string;
  price: number;
}

async function fetchLot(id: string): Promise<LotData> {
  const { data, error } = await supabase
    .from('lots')
    .select('*')
    .eq('id', id)
    .single();
  
  if (error) throw error;
  return data;
}

// ‚ùå MAUVAIS
function fetchLot(id: any) {
  // Pas de types
}
```

### Gestion d'erreurs Supabase

```typescript
// Pattern standard
try {
  const { data, error } = await supabase
    .from('table')
    .select();
  
  if (error) throw error;
  
  return data;
} catch (error) {
  console.error('Description de l\'erreur:', error);
  // Gestion sp√©cifique si besoin
  throw new Error('Message utilisateur friendly');
}
```

### Classes Tailwind

**Ordre des classes** : Layout ‚Üí Spacing ‚Üí Sizing ‚Üí Colors ‚Üí Typography ‚Üí Effects

```tsx
// ‚úÖ BON - Classes organis√©es logiquement
<div className="flex items-center justify-between gap-4 p-6 w-full bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow">

// ‚ùå MAUVAIS - Classes d√©sordonn√©es
<div className="shadow-md bg-white w-full gap-4 rounded-lg hover:shadow-lg p-6 flex items-center transition-shadow justify-between">
```

**Classes personnalis√©es** : Utiliser les classes d√©finies dans `index.css`

```css
/* Classes utilitaires projet */
.card { /* Carte standard */ }
.btn-primary { /* Bouton principal */ }
.btn-secondary { /* Bouton secondaire */ }
.section-gradient { /* D√©grad√© de section */ }
.hover-lift { /* Effet de lev√©e au hover */ }
.animate-fade-in-up { /* Animation d'entr√©e */ }
```

## üóÑÔ∏è Base de donn√©es

### Tables principales

1. **profiles** : Profils utilisateurs (√©tend auth.users)
   - `role`: customer | merchant | beneficiary | collector | admin
   - `beneficiary_id`: Format YYYY-BEN-XXXXX pour b√©n√©ficiaires

2. **lots** : Lots d'invendus cr√©√©s par commer√ßants
   - `status`: available | reserved | sold_out | expired
   - `quantity_total`, `quantity_reserved`, `quantity_sold`

3. **reservations** : R√©servations avec code PIN √† 6 chiffres
   - `pickup_pin`: Code pour retrait
   - `status`: pending | confirmed | completed | cancelled

4. **suspended_baskets** : Paniers suspendus (solidarit√©)
   - `donor_id`, `merchant_id`, `claimed_by`
   - `status`: available | reserved | claimed | expired

5. **missions** : Missions pour collecteurs
   - `collector_id`, `merchant_id`
   - `status`: available | accepted | in_progress | completed | cancelled

6. **impact_metrics** : Suivi d'impact (repas sauv√©s, CO‚ÇÇ, dons)
7. **notifications** : Notifications utilisateurs
8. **platform_settings** : Param√®tres syst√®me (admins)
9. **beneficiary_daily_limits** : Limite 2 r√©servations/jour

### Requ√™tes Supabase

**Avec relations (JOIN)** :
```typescript
const { data } = await supabase
  .from('lots')
  .select(`
    *,
    merchant:profiles!merchant_id(full_name, business_name, phone)
  `)
  .eq('status', 'available');
```

**Filtrage** :
```typescript
.eq('column', value)           // √âgalit√©
.neq('column', value)          // Diff√©rent
.gt('column', value)           // Plus grand
.gte('column', value)          // Plus grand ou √©gal
.lt('column', value)           // Plus petit
.lte('column', value)          // Plus petit ou √©gal
.ilike('column', '%search%')   // LIKE insensible √† la casse
.in('column', [val1, val2])    // IN
.is('column', null)            // IS NULL
.order('column', { ascending: false })
.limit(10)
.range(0, 9)                   // Pagination
```

## üéØ Patterns sp√©cifiques

### Authentification

```typescript
// Store global authStore (Zustand)
const { user, profile, signIn, signOut } = useAuthStore();

// Protection de route
if (!user) return <Navigate to="/login" />;

// Protection par r√¥le
if (profile?.role !== 'admin') return <AccessDenied />;
```

### QR Code & Retrait

**G√©n√©ration** :
```typescript
import { QRCodeSVG } from 'qrcode.react';

const qrData = JSON.stringify({
  reservationId: reservation.id,
  pin: reservation.pickup_pin,
  userId: user.id,
  lotId: reservation.lot_id,
  timestamp: new Date().toISOString()
});

<QRCodeSVG value={qrData} size={200} />
```

**Scan et validation** :
```typescript
// 1. Scanner le QR
const { reservationId, pin } = JSON.parse(qrCodeData);

// 2. R√©cup√©rer la r√©servation
const { data: reservation } = await supabase
  .from('reservations')
  .select('*, lot:lots(*)')
  .eq('id', reservationId)
  .single();

// 3. Valider le PIN
if (inputPin !== reservation.pickup_pin) {
  throw new Error('Code PIN incorrect');
}

// 4. Marquer comme compl√©t√©
await supabase
  .from('reservations')
  .update({
    status: 'completed',
    completed_at: new Date().toISOString()
  })
  .eq('id', reservationId);
```

### Calcul d'impact

```typescript
// Formules standards
const mealsSaved = quantity;
const co2Saved = quantity * 0.9; // 0.9 kg CO‚ÇÇ par repas
const moneySaved = originalPrice - discountedPrice;
```

## üö´ Anti-patterns √† √©viter

### √Ä NE PAS FAIRE

‚ùå **Utiliser `any` sans raison**
```typescript
function process(data: any) { } // NON
```

‚ùå **Ignorer les erreurs Supabase**
```typescript
const { data } = await supabase.from('lots').select(); // O√π est error?
```

‚ùå **Mutations directes d'√©tat**
```typescript
state.value = newValue; // NON - utiliser setState
```

‚ùå **Composants trop gros** (> 300 lignes)
‚Üí Diviser en sous-composants

‚ùå **Logique m√©tier dans les composants**
‚Üí Extraire dans utils/ ou hooks/

‚ùå **Styles inline**
```tsx
<div style={{ color: 'red' }}> // NON - utiliser Tailwind
```

‚ùå **Commits non descriptifs**
```bash
git commit -m "fix" // NON
git commit -m "update stuff" // NON
```

## ‚úÖ Bonnes pratiques

### √Ä FAIRE

‚úÖ **Typer tout avec TypeScript**
‚úÖ **G√©rer toutes les erreurs explicitement**
‚úÖ **Utiliser les types Supabase g√©n√©r√©s** (`database.types.ts`)
‚úÖ **Extraire les constantes**
```typescript
const MAX_RESERVATIONS_PER_DAY = 2;
const PIN_LENGTH = 6;
```

‚úÖ **Utiliser les hooks personnalis√©s pour logique r√©utilisable**
```typescript
// hooks/useLotFilters.ts
export function useLotFilters() {
  // Logic
  return { filteredLots, setFilter };
}
```

‚úÖ **Loading states et optimistic UI**
```typescript
const [loading, setLoading] = useState(false);

const handleAction = async () => {
  setLoading(true);
  try {
    await doAction();
  } finally {
    setLoading(false);
  }
};
```

‚úÖ **Composants r√©utilisables dans shared/**
```typescript
// shared/Button.tsx
export function Button({ children, variant = 'primary', ...props }) {
  const className = variant === 'primary' ? 'btn-primary' : 'btn-secondary';
  return <button className={className} {...props}>{children}</button>;
}
```

‚úÖ **Messages d'erreur utilisateur-friendly**
```typescript
throw new Error('Impossible de charger les lots. V√©rifiez votre connexion.');
```

## üîê S√©curit√©

### R√®gles importantes

1. **Jamais de secrets dans le frontend** ‚Üí Variables d'env uniquement
2. **Valider c√¥t√© serveur** (RLS policies Supabase)
3. **V√©rifier les r√¥les** avant affichage de donn√©es sensibles
4. **Sanitiser les entr√©es** (Supabase le fait, mais attention aux XSS)
5. **HTTPS obligatoire** en production

### Row Level Security (RLS)

- **Activ√©** : `platform_settings`, `suspended_baskets`
- **D√©sactiv√© (MVP)** : autres tables pour simplicit√©

**En production**, activer RLS partout avec policies strictes.

## üì± Responsive Design

### Breakpoints Tailwind

- `sm`: 640px
- `md`: 768px (tablette)
- `lg`: 1024px (desktop)
- `xl`: 1280px
- `2xl`: 1536px

### Pattern mobile-first

```tsx
<div className="
  flex flex-col          /* Mobile: colonne */
  md:flex-row           /* Tablette+: ligne */
  gap-4 md:gap-6        /* Espacement adaptatif */
">
```

## üß™ Tests (futur)

Quand les tests seront impl√©ment√©s :

```typescript
// Pattern de test recommand√©
import { render, screen } from '@testing-library/react';
import { LotCard } from './LotCard';

describe('LotCard', () => {
  it('affiche le titre du lot', () => {
    render(<LotCard lot={mockLot} />);
    expect(screen.getByText(mockLot.title)).toBeInTheDocument();
  });
});
```

## üìù Commentaires

### Quand commenter

‚úÖ **Commenter** :
- Logique complexe non √©vidente
- Workarounds temporaires (+ TODO)
- Calculs avec formules (ex: CO‚ÇÇ)
- Fonctions publiques (JSDoc)

‚ùå **Ne PAS commenter** :
- Code √©vident
- R√©p√©ter ce que le code dit d√©j√†

```typescript
// ‚úÖ BON
/**
 * Calcule l'impact environnemental d'un repas sauv√©
 * Formule : 0.9 kg CO‚ÇÇ par repas (source: ADEME 2024)
 */
function calculateCO2Impact(meals: number): number {
  return meals * 0.9;
}

// ‚ùå MAUVAIS
// Cette fonction additionne deux nombres
function add(a: number, b: number) {
  return a + b; // Retourne la somme
}
```

## üîÑ Workflow Git

### Commits conventionnels

```bash
feat(lots): add search filter by category
fix(auth): correct PIN validation logic
docs(readme): update installation steps
refactor(components): simplify UserCard
style(lots): improve card spacing
test(reservations): add PIN validation tests
chore(deps): update Supabase to 2.57.4
```

### Branches

```bash
main                    # Production
‚îú‚îÄ‚îÄ develop            # D√©veloppement principal
    ‚îú‚îÄ‚îÄ feature/...    # Nouvelles fonctionnalit√©s
    ‚îú‚îÄ‚îÄ fix/...        # Corrections de bugs
    ‚îú‚îÄ‚îÄ refactor/...   # Refactoring
    ‚îî‚îÄ‚îÄ docs/...       # Documentation
```

## üìö Ressources

- [Documentation React](https://react.dev)
- [Documentation TypeScript](https://www.typescriptlang.org/docs/)
- [Documentation Tailwind CSS](https://tailwindcss.com/docs)
- [Documentation Supabase](https://supabase.com/docs)
- [Documentation Zustand](https://docs.pmnd.rs/zustand)

## üéØ Checklist avant commit

- [ ] Code compile sans erreur (`npm run build`)
- [ ] Linter passe (`npm run lint`)
- [ ] TypeCheck passe (`npm run typecheck`)
- [ ] Pas de console.log oubli√©s (sauf debug intentionnel)
- [ ] Types TypeScript corrects (pas de `any`)
- [ ] Gestion d'erreurs pr√©sente
- [ ] Composants responsive test√©s
- [ ] Code comment√© si logique complexe
- [ ] Message de commit descriptif

## üí° Philosophie du projet

**Simplicit√© > Complexit√©** : Privil√©gier les solutions simples et maintenables.

**Performance** : Optimiser mais sans sur-optimisation pr√©matur√©e.

**Accessibilit√©** : Interface utilisable par tous (contraste, navigation clavier).

**Impact social** : Chaque ligne de code contribue √† r√©duire le gaspillage et aider les personnes dans le besoin.

---

**Version** : 1.0.0
**Derni√®re mise √† jour** : Janvier 2025

