# Règles de développement EcoPanier pour l'IA

## 📋 Contexte du projet

**EcoPanier** est une plateforme anti-gaspillage alimentaire avec volet solidarité sociale (paniers suspendus).
Elle connecte commerçants, clients, bénéficiaires et collecteurs pour sauver des invendus tout en aidant les personnes en précarité.

### Mission principale
- Réduire le gaspillage alimentaire en sauvant les invendus
- Promouvoir la solidarité via les paniers suspendus
- Soutenir les commerces locaux engagés
- Faciliter la logistique solidaire avec les collecteurs

### Utilisateurs (5 rôles)
1. **Client** : Achète des lots à prix réduits, offre des paniers suspendus
2. **Commerçant** : Crée des lots d'invendus, gère une station de retrait, utilise l'IA pour analyser les images
3. **Bénéficiaire** : Accède aux lots gratuits et paniers suspendus (max 2/jour)
4. **Collecteur** : Effectue les livraisons solidaires contre rémunération
5. **Admin** : Gère la plateforme, les utilisateurs et les paramètres

---

## 🛠️ Stack technique

### Frontend
- **React 18.3.1** avec **TypeScript 5.5.3** (OBLIGATOIRE, jamais `any`)
- **Vite 5.4.2** comme build tool
- **React Router DOM 7.9.4** pour le routing
- **Tailwind CSS 3.4.1** pour le styling (JAMAIS de styles inline)
- **Zustand 5.0.8** pour l'état global
- **Lucide React** pour les icônes
- **Recharts 3.2.1** pour les graphiques
- **date-fns 4.1.0** pour les dates

### Backend
- **Supabase 2.57.4** (BaaS)
  - PostgreSQL pour la base de données
  - Supabase Auth pour l'authentification
  - Row Level Security (RLS) sur tables sensibles
  - Storage pour les images (futur)
  - Realtime pour notifications (futur)

### QR Code & IA
- **qrcode.react** et **@yudiel/react-qr-scanner** pour les QR codes
- **@google/generative-ai** (Gemini 2.0 Flash) pour l'analyse d'images de lots

---

## 📁 Structure du projet

```
src/
├── components/              # Composants organisés par domaine métier
│   ├── admin/              # Dashboard admin, analytics, logs, settings
│   ├── auth/               # Authentification
│   ├── beneficiary/        # Interface bénéficiaire
│   ├── collector/          # Interface collecteur
│   ├── customer/           # Interface client
│   ├── merchant/           # Interface commerçant
│   ├── landing/            # Page d'accueil publique
│   ├── pages/              # Pages génériques
│   ├── pickup/             # Station de retrait
│   └── shared/             # Composants réutilisables
├── contexts/               # React Context (SettingsContext)
├── hooks/                  # Hooks personnalisés
├── lib/                    # Configuration (supabase.ts, types DB)
├── stores/                 # Zustand stores (authStore)
├── utils/                  # Fonctions utilitaires
├── App.tsx                 # Routing principal
└── main.tsx                # Point d'entrée
```

**Règle architecture** : Utiliser une architecture feature-based. Chaque domaine métier a ses propres composants isolés.

---

## 🎯 Conventions de code STRICTES

### 1. TypeScript (OBLIGATOIRE)

```typescript
// ✅ TOUJOURS faire ça
interface UserProfile {
  id: string;
  fullName: string;
  role: 'customer' | 'merchant' | 'beneficiary' | 'collector' | 'admin';
}

function fetchProfile(userId: string): Promise<UserProfile> {
  // Implementation typée
}

// ❌ JAMAIS faire ça
function fetchProfile(userId: any) {
  // Pas de types = INTERDIT
}
```

**Règle** : Jamais d'`any` sauf cas exceptionnel justifié. TOUJOURS typer les fonctions, props, variables.

### 2. Nommage

| Élément | Convention | Exemple |
|---------|-----------|---------|
| **Composants** | PascalCase | `UserProfile.tsx`, `LotCard.tsx` |
| **Fichiers composants** | PascalCase | `CustomerDashboard.tsx` |
| **Hooks** | camelCase + `use` | `useAuthStore.ts`, `useLotFilters.ts` |
| **Fonctions** | camelCase | `fetchUserData()`, `calculatePrice()` |
| **Variables** | camelCase | `const userData = ...` |
| **Constantes** | UPPER_SNAKE_CASE | `const MAX_RETRY = 3`, `const PIN_LENGTH = 6` |
| **Types/Interfaces** | PascalCase | `interface UserProfile {}` |
| **Fichiers utils** | camelCase | `helpers.ts`, `validationHelpers.ts` |

### 3. Structure d'un composant React

```typescript
// ORDRE OBLIGATOIRE :

// 1. Imports externes
import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';

// 2. Imports internes (stores, contexts, components)
import { useAuthStore } from '@/stores/authStore';
import { Button } from '@/components/shared/Button';

// 3. Imports types
import type { User } from '@/lib/database.types';

// 4. Définition des types/interfaces
interface MyComponentProps {
  user: User;
  onAction?: () => void;
}

// 5. Composant
export function MyComponent({ user, onAction }: MyComponentProps) {
  // A. État local
  const [loading, setLoading] = useState(false);
  
  // B. Hooks (stores, contexts, router)
  const { profile } = useAuthStore();
  const navigate = useNavigate();
  
  // C. Effets
  useEffect(() => {
    // Side effects
  }, [user]);
  
  // D. Handlers
  const handleClick = async () => {
    setLoading(true);
    // Logic
    setLoading(false);
  };
  
  // E. Early returns (conditions de sortie)
  if (!user) return null;
  if (loading) return <LoadingSpinner />;
  
  // F. Render principal
  return (
    <div className="card">
      {/* JSX */}
    </div>
  );
}
```

### 4. Gestion d'erreurs Supabase (PATTERN OBLIGATOIRE)

```typescript
// ✅ TOUJOURS faire ça
try {
  const { data, error } = await supabase
    .from('lots')
    .select();
  
  if (error) throw error;
  
  return data;
} catch (error) {
  console.error('Description de l\'erreur:', error);
  // Message utilisateur-friendly
  throw new Error('Impossible de charger les lots. Vérifiez votre connexion.');
}

// ❌ JAMAIS ignorer les erreurs
const { data } = await supabase.from('lots').select(); // Où est error?
```

### 5. Classes Tailwind (ORDRE OBLIGATOIRE)

**Ordre** : Layout → Spacing → Sizing → Colors → Typography → Effects

```tsx
// ✅ BON - Classes organisées logiquement
<div className="flex items-center justify-between gap-4 p-6 w-full bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow">

// ❌ MAUVAIS - Classes désordonnées
<div className="shadow-md bg-white w-full gap-4 rounded-lg hover:shadow-lg p-6 flex items-center">
```

**Classes personnalisées disponibles** (à utiliser) :
- `.card` : Carte standard
- `.btn-primary` : Bouton principal
- `.btn-secondary` : Bouton secondaire
- `.section-gradient` : Dégradé de section
- `.hover-lift` : Effet de levée au hover
- `.animate-fade-in-up` : Animation d'entrée

---

## 🗄️ Base de données & Supabase

### Tables principales

1. **profiles** : Profils utilisateurs (étend auth.users)
   - `role`: customer | merchant | beneficiary | collector | admin
   - `beneficiary_id`: Format YYYY-BEN-XXXXX pour bénéficiaires

2. **lots** : Lots d'invendus créés par commerçants
   - `status`: available | reserved | sold_out | expired
   - `quantity_total`, `quantity_reserved`, `quantity_sold`

3. **reservations** : Réservations avec code PIN à 6 chiffres
   - `pickup_pin`: Code pour retrait
   - `status`: pending | confirmed | completed | cancelled

4. **suspended_baskets** : Paniers suspendus (solidarité)
   - `donor_id`, `merchant_id`, `claimed_by`
   - `status`: available | reserved | claimed | expired

5. **missions** : Missions pour collecteurs
   - `collector_id`, `merchant_id`
   - `status`: available | accepted | in_progress | completed | cancelled

### Requêtes Supabase avec relations (JOIN)

```typescript
// ✅ BON - Single query avec relations
const { data } = await supabase
  .from('lots')
  .select(`
    *,
    merchant:profiles!merchant_id(full_name, business_name, phone)
  `)
  .eq('status', 'available');

// ❌ MAUVAIS - Multiple queries
const lots = await supabase.from('lots').select();
for (const lot of lots) {
  const merchant = await supabase.from('profiles').select().eq('id', lot.merchant_id);
}
```

### Filtres Supabase

```typescript
.eq('column', value)           // Égalité
.neq('column', value)          // Différent
.gt('column', value)           // Plus grand
.gte('column', value)          // Plus grand ou égal
.lt('column', value)           // Plus petit
.ilike('column', '%search%')   // LIKE insensible à la casse
.in('column', [val1, val2])    // IN
.is('column', null)            // IS NULL
.order('column', { ascending: false })
.limit(10)
.range(0, 9)                   // Pagination
```

---

## 🎯 Patterns spécifiques EcoPanier

### 1. Authentification

```typescript
// Store global authStore (Zustand)
const { user, profile, signIn, signOut } = useAuthStore();

// Protection de route
if (!user) return <Navigate to="/login" />;

// Protection par rôle
if (profile?.role !== 'admin') return <AccessDenied />;
```

### 2. QR Code & Retrait

**Génération** :
```typescript
import { QRCodeSVG } from 'qrcode.react';

const qrData = JSON.stringify({
  reservationId: reservation.id,
  pin: reservation.pickup_pin,
  userId: user.id,
  lotId: reservation.lot_id,
  timestamp: new Date().toISOString()
});

<QRCodeSVG value={qrData} size={200} />
```

**Scan et validation** :
```typescript
// 1. Scanner le QR
const { reservationId, pin } = JSON.parse(qrCodeData);

// 2. Récupérer la réservation
const { data: reservation } = await supabase
  .from('reservations')
  .select('*, lot:lots(*)')
  .eq('id', reservationId)
  .single();

// 3. Valider le PIN
if (inputPin !== reservation.pickup_pin) {
  throw new Error('Code PIN incorrect');
}

// 4. Marquer comme complété
await supabase
  .from('reservations')
  .update({
    status: 'completed',
    completed_at: new Date().toISOString()
  })
  .eq('id', reservationId);
```

### 3. Calcul d'impact (FORMULES STANDARDS)

```typescript
// Formules à utiliser
const mealsSaved = quantity;
const co2Saved = quantity * 0.9; // 0.9 kg CO₂ par repas (source: ADEME)
const moneySaved = originalPrice - discountedPrice;
```

### 4. Analyse IA avec Gemini (Nouveau)

```typescript
// Service Gemini pour analyse d'images
import { analyzeImageWithGemini } from '@/utils/geminiService';

// Analyser une image de produit alimentaire
const result = await analyzeImageWithGemini(imageFile);

// Résultat contient: title, description, category, prices, quantity, etc.
if (result.success) {
  // Pré-remplir le formulaire avec les données extraites
  setFormData(result.data);
}
```

---

## 🚫 Anti-patterns à ÉVITER ABSOLUMENT

### ❌ À NE JAMAIS FAIRE

1. **Utiliser `any` sans raison**
```typescript
function process(data: any) { } // INTERDIT
```

2. **Ignorer les erreurs Supabase**
```typescript
const { data } = await supabase.from('lots').select(); // INTERDIT
```

3. **Mutations directes d'état**
```typescript
state.value = newValue; // INTERDIT - utiliser setState
```

4. **Composants trop gros** (> 300 lignes)
→ Diviser en sous-composants

5. **Logique métier dans les composants**
→ Extraire dans `utils/` ou `hooks/`

6. **Styles inline**
```tsx
<div style={{ color: 'red' }}> // INTERDIT - utiliser Tailwind
```

7. **Commits non descriptifs**
```bash
git commit -m "fix" // INTERDIT
git commit -m "update stuff" // INTERDIT
```

---

## ✅ Bonnes pratiques OBLIGATOIRES

### 1. Typer tout avec TypeScript

```typescript
// ✅ Utiliser les types Supabase générés
import type { Database } from '@/lib/database.types';
type Profile = Database['public']['Tables']['profiles']['Row'];
```

### 2. Gérer toutes les erreurs explicitement

```typescript
try {
  await doSomething();
} catch (error) {
  console.error('Context de l\'erreur:', error);
  // Message utilisateur-friendly
  throw new Error('Message clair pour l\'utilisateur');
}
```

### 3. Extraire les constantes

```typescript
// ✅ BON
const MAX_RESERVATIONS_PER_DAY = 2;
const PIN_LENGTH = 6;
const CO2_PER_MEAL = 0.9;

// ❌ MAUVAIS - Nombres magiques
if (count > 2) { ... }
```

### 4. Utiliser les hooks personnalisés pour logique réutilisable

```typescript
// hooks/useLotFilters.ts
export function useLotFilters() {
  // Logic réutilisable
  return { filteredLots, setFilter };
}
```

### 5. Loading states et optimistic UI

```typescript
const [loading, setLoading] = useState(false);

const handleAction = async () => {
  setLoading(true);
  try {
    await doAction();
  } finally {
    setLoading(false);
  }
};
```

### 6. Composants réutilisables dans shared/

```typescript
// shared/Button.tsx
export function Button({ children, variant = 'primary', ...props }) {
  const className = variant === 'primary' ? 'btn-primary' : 'btn-secondary';
  return <button className={className} {...props}>{children}</button>;
}
```

---

## 🔐 Sécurité

### Règles importantes

1. **Jamais de secrets dans le frontend** → Variables d'env uniquement
2. **Valider côté serveur** (RLS policies Supabase)
3. **Vérifier les rôles** avant affichage de données sensibles
4. **Sanitiser les entrées** (Supabase le fait, mais attention aux XSS)
5. **HTTPS obligatoire** en production

### Row Level Security (RLS)

- **Activé** : `platform_settings`, `suspended_baskets`
- **Désactivé (MVP)** : autres tables pour simplicité

**En production**, activer RLS partout avec policies strictes.

---

## 📱 Responsive Design

### Breakpoints Tailwind

- `sm`: 640px
- `md`: 768px (tablette)
- `lg`: 1024px (desktop)
- `xl`: 1280px
- `2xl`: 1536px

### Pattern mobile-first

```tsx
<div className="
  flex flex-col          /* Mobile: colonne */
  md:flex-row           /* Tablette+: ligne */
  gap-4 md:gap-6        /* Espacement adaptatif */
">
```

---

## 📝 Commentaires

### Quand commenter

✅ **Commenter** :
- Logique complexe non évidente
- Workarounds temporaires (+ TODO)
- Calculs avec formules (ex: CO₂)
- Fonctions publiques (JSDoc)

❌ **Ne PAS commenter** :
- Code évident
- Répéter ce que le code dit déjà

```typescript
// ✅ BON
/**
 * Calcule l'impact environnemental d'un repas sauvé
 * Formule : 0.9 kg CO₂ par repas (source: ADEME 2024)
 */
function calculateCO2Impact(meals: number): number {
  return meals * 0.9;
}

// ❌ MAUVAIS
// Cette fonction additionne deux nombres
function add(a: number, b: number) {
  return a + b; // Retourne la somme
}
```

---

## 🔄 Workflow Git

### Commits conventionnels (OBLIGATOIRE)

```bash
feat(lots): add search filter by category
fix(auth): correct PIN validation logic
docs(readme): update installation steps
refactor(components): simplify UserCard
style(lots): improve card spacing
test(reservations): add PIN validation tests
chore(deps): update Supabase to 2.57.4
```

**Format** : `<type>(<scope>): <description>`

**Types** :
- `feat`: Nouvelle fonctionnalité
- `fix`: Correction de bug
- `docs`: Documentation
- `refactor`: Refactoring
- `style`: Formatage/UI
- `test`: Tests
- `chore`: Maintenance

---

## 💡 Tâches courantes

### Ajouter une nouvelle fonctionnalité

1. **Créer une branche** : `feature/nom-fonctionnalite`
2. **Placer le code** dans le bon dossier domain (`admin/`, `customer/`, etc.)
3. **Typer tout** avec TypeScript
4. **Gérer les erreurs** explicitement
5. **Tester manuellement** en dev
6. **Commit** avec message conventionnel
7. **Ouvrir une PR** vers `develop`

### Ajouter un endpoint Supabase

```typescript
// 1. Définir le type (si nouveau)
type NewData = Database['public']['Tables']['new_table']['Row'];

// 2. Créer la fonction
async function fetchNewData(id: string): Promise<NewData> {
  const { data, error } = await supabase
    .from('new_table')
    .select('*')
    .eq('id', id)
    .single();
  
  if (error) throw error;
  return data;
}

// 3. Gérer les erreurs dans le composant
try {
  const data = await fetchNewData(id);
  setData(data);
} catch (error) {
  console.error('Erreur:', error);
  setError('Message utilisateur-friendly');
}
```

### Ajouter une table DB

1. **Créer une migration** dans `supabase/migrations/`
2. **Nommer** : `YYYYMMDD_description.sql`
3. **Définir la table** avec contraintes et indexes
4. **Mettre à jour** `database.types.ts` (générer via Supabase CLI)
5. **Documenter** dans `DB_SCHEMA.md`

---

## 🎨 Design System

### Couleurs Tailwind personnalisées

```typescript
colors: {
  primary: { 50-950 },    // Bleu (brand)
  secondary: { 50-950 },  // Violet
  accent: { 50-950 },     // Rouge
  success: { 50-950 },    // Vert
  warning: { 50-950 },    // Orange
  neutral: { 50-950 },    // Gris
}
```

### Animations personnalisées

```css
animate-fade-in
animate-fade-in-up
animate-slide-in-right
animate-float
animate-pulse-soft
animate-shimmer
```

---

## 🔍 Dépendances à privilégier

- **State management** : Zustand (léger et simple)
- **Forms** : React Hook Form (futur)
- **Dates** : date-fns (pas moment.js)
- **Icons** : Lucide React (cohérent avec le design)
- **Charts** : Recharts (simple et performant)
- **Notifications** : Toast custom (éviter bibliothèques lourdes)

---

## 🚨 Choses à éviter

- ❌ `console.log()` oubliés en production (utiliser `console.error` pour erreurs)
- ❌ Bibliothèques lourdes inutiles (vérifier bundle size)
- ❌ Requêtes Supabase dans des boucles (utiliser JOINs)
- ❌ Re-renders inutiles (utiliser `React.memo`, `useMemo`, `useCallback`)
- ❌ Hardcoded strings qui devraient être des constantes
- ❌ Logique métier dupliquée (factoriser dans utils/hooks)

---

## 📚 Documentation obligatoire

### Quand documenter

1. **Nouvelle feature** : Ajouter exemple dans README si pertinent
2. **Nouveau hook/util** : JSDoc avec exemples
3. **Changement de DB** : Mettre à jour DB_SCHEMA.md
4. **Nouveau pattern** : Ajouter dans .cursorrules
5. **Breaking change** : Documenter dans CHANGELOG

---

## 🎯 Checklist avant commit

- [ ] Code compile sans erreur (`npm run build`)
- [ ] Linter passe (`npm run lint`)
- [ ] TypeCheck passe (`npm run typecheck`)
- [ ] Pas de `console.log` oubliés
- [ ] Pas de `any` TypeScript
- [ ] Gestion d'erreurs présente
- [ ] Composants responsive testés
- [ ] Code commenté si logique complexe
- [ ] Message de commit descriptif
- [ ] Variables d'environnement documentées si nouvelles

---

## 💡 Philosophie du projet

**Simplicité > Complexité** : Privilégier les solutions simples et maintenables.

**Performance** : Optimiser mais sans sur-optimisation prématurée.

**Accessibilité** : Interface utilisable par tous (contraste, navigation clavier).

**Impact social** : Chaque ligne de code contribue à réduire le gaspillage et aider les personnes dans le besoin.

---

**Version** : 1.0.0  
**Dernière mise à jour** : Janvier 2025  
**Pour plus de détails** : Voir README.md, ARCHITECTURE.md, API_DOCS.md, DB_SCHEMA.md
